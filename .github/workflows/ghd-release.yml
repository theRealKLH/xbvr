name: Create Release on Branch Push with Date Tag

on:
  push:
    branches:
      - RFTW # Change this to your desired release branch, e.g., 'production', 'master'

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Essential for getting full Git history and all tags

      - name: Calculate new date-based tag
        id: calculate_tag
        run: |
          YEAR=$(date +%Y)
          # Use %-m to get month without leading zero (e.g., 7 instead of 07)
          MONTH=$(date +%-m) 
          DATE_PREFIX="${YEAR}.${MONTH}"

          echo "Current Date Prefix: $DATE_PREFIX"

          # Get all existing tags that match the current year.month prefix
          # and find the highest number for that month.
          # We use a custom sort to handle versions correctly (e.g., 9 < 10)
          HIGHEST_COUNT=-1 # Initialize with -1 to correctly handle the first tag as 0
          EXISTING_TAGS=$(git tag -l "${DATE_PREFIX}.*")

          if [ -n "$EXISTING_TAGS" ]; then
            for TAG in $EXISTING_TAGS; do
              # Extract the number part from the tag (e.g., 0 from 2025.7.0)
              COUNT_PART=$(echo "$TAG" | awk -F'.' '{print $3}')
              if [ "$COUNT_PART" -gt "$HIGHEST_COUNT" ]; then
                HIGHEST_COUNT="$COUNT_PART"
              fi
            done
          fi
          
          # The new count will be HIGHEST_COUNT + 1. 
          # If HIGHEST_COUNT was -1 (no previous tags for this month), NEW_COUNT becomes 0.
          NEW_COUNT=$((HIGHEST_COUNT + 1))


          NEW_TAG="${DATE_PREFIX}.${NEW_COUNT}"
          echo "Generated New Tag: $NEW_TAG"

          # Store the new tag for subsequent steps
          echo "new_release_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
          # We need the *full* previous tag name to compare git history accurately
          # If HIGHEST_COUNT was -1, it means no tags for this month yet, so no specific previous tag.
          if [ "$HIGHEST_COUNT" -ge 0 ]; then
             echo "previous_tag=${DATE_PREFIX}.${HIGHEST_COUNT}" >> "$GITHUB_OUTPUT"
          else
             echo "previous_tag=" >> "$GITHUB_OUTPUT" # Indicate no specific previous tag
          fi
        shell: bash

      - name: Get commit messages since last date-based tag
        id: get_commits
        run: |
          CURRENT_TAG="${{ steps.calculate_tag.outputs.new_release_tag }}"
          PREVIOUS_TAG="${{ steps.calculate_tag.outputs.previous_tag }}" # Now directly the full tag

          COMMIT_MESSAGES=""
          # Check if there was a previous tag to compare against
          if [ -n "$PREVIOUS_TAG" ] && git rev-parse --quiet --verify "refs/tags/$PREVIOUS_TAG" >/dev/null; then
            echo "Found previous tag for comparison: $PREVIOUS_TAG"
            COMMIT_MESSAGES=$(git log "$PREVIOUS_TAG"..HEAD --pretty=format:"- %s (by %an)")
          else
            # If no previous tag for this month, or previous_tag was empty (first tag for date_prefix),
            # get all recent commits up to the current tag.
            echo "No specific previous tag found or this is the first tag. Getting recent commits up to current tag."
            COMMIT_MESSAGES=$(git log "$CURRENT_TAG" --pretty=format:"- %s (by %an)" | head -n 50) # Limit for first runs
          fi

          # Handle empty commit messages gracefully
          if [ -z "$COMMIT_MESSAGES" ]; then
            COMMIT_MESSAGES="No new commits detected since the last release, or this is the initial release."
          fi

          # Output as a multi-line string
          echo "commit_messages<<EOF" >> "$GITHUB_OUTPUT"
          echo "$COMMIT_MESSAGES" >> "$GITHUB_OUTPUT"
          echo "EOF" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Create Git Tag
        run: |
          git config user.name "GitHub Actions Bot"
          git config user.email "actions@github.com"
          git tag ${{ steps.calculate_tag.outputs.new_release_tag }}
          git push origin ${{ steps.calculate_tag.outputs.new_release_tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # Required for pushing tags

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is automatically provided by GitHub
        with:
          tag_name: ${{ steps.calculate_tag.outputs.new_release_tag }}
          release_name: Release ${{ steps.calculate_tag.outputs.new_release_tag }}
          body: |
            # Release Notes - ${{ steps.calculate_tag.outputs.new_release_tag }}

            This release was created automatically from a push to the `${{ github.ref_name }}` branch.

            ## New Changes:
            ${{ steps.get_commits.outputs.commit_messages }}

          draft: false
          prerelease: false

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Build UI
        run:  cd ui && yarn install --ignore-engines && yarn build

      - name: zeroTier
        uses: zerotier/github-action@v1.0.1
        with:
          network_id: ${{ secrets.ZEROTIER_NETWORK_ID }}
          auth_token: ${{ secrets.ZEROTIER_CENTRAL_TOKEN }}

      - name: Setup release environment
        run: |-
          echo 'GITHUB_TOKEN=${{secrets.GITHUB_TOKEN}}' > .release-env
          echo 'GITHUB_USER=${{github.event.repository.owner.login}}' >> .release-env
          echo GITHUB_PROJECT=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]') >> .release-env
          echo 'DOCKER_CREDS_FILE=.docker-creds' >> .release-env
          echo '${{github.event.repository.owner.login}}:${{ secrets.GITHUB_TOKEN }}:ghcr.io' >> .docker-creds

      - name: Release publish
        run: make release

      - name: POST release
        run: curl -k -X POST -i ${{ secrets.XBVR_STACK }}      
        
      - name: pushover-actions
        uses: umahmood/pushover-actions@main
        env:
          PUSHOVER_TOKEN: ${{ secrets.PUSHOVER_TOKEN }}
          PUSHOVER_USER: ${{ secrets.PUSHOVER_USER }}
        with:
          status: ${{ job.status }}
          title: 'RELEASE deployment COMPLETE'
#      - name: Output Release URL
#        run: echo "Release URL: ${{ steps.create_release.outputs.html_url }}"